//Class generated by running the test and copy and pasting the resulting skeleton boiler plate code (and fixing the namespace)
using NUnit.Framework;
using OpenQA.Selenium;
using OpenQA.Selenium.Edge;
using System;
using TechTalk.SpecFlow;
using uk.co.edgewords.nfocus6specflow.Support;
//using static uk.co.edgewords.nfocus6specflow.StepDefinitions.Hooks;

namespace uk.co.edgewords.nfocus6specflow.StepDefinitions
{
    [Binding] //This annotation tells Specflow this file contains steps. The name of the file or it's location is not important.
    public class GooGleStepsGeneratedByRunningTest 
    {
        private IWebDriver driver; //Field accessible to all methods in this class to share driver

        //Not important now, but ScenarioContext can be used to share data (e.g. a WebDriver) across methods, /and/ across step definition classes
        private readonly ScenarioContext _scenarioContext;
        private readonly WDWrapper _wrapper;
        public GooGleStepsGeneratedByRunningTest(ScenarioContext scenarioContext, WDWrapper wrapper)
        {
            _scenarioContext = scenarioContext;
            //this.driver = (IWebDriver)_scenarioContext["myDriver"]; //Must cast the plain object that is in scenario context back to the appropriate type manually
            this.driver = wrapper.Driver; //Get the driver back from the passed wrapper object. No casting needed - it can only ever contain a IWebDriver.
        }



        [Given("I am on the Google homepage")]
        [Given(@"i am on the Google homepage")] //Multiple annotations can be used to handle different phrasings for the same concrete steps
        [Given(@"We are on (?i)Google(?-i) now")] //RegEx can be used to toggle case insensitivity
        public void GivenIAmOnTheGoogleHomepage()
        {
            //Skeleton code will throw a Pending exception when initially generated
            //This is essentially your "ToDo": complete the code that does the action specified in the Feature file.
            //_scenarioContext.Pending();
            driver.Url = "https://www.google.co.uk";
            //Also need to accept cookies. Not directly specified in the Feature file, but a "technical implied" detail we can handle on the automation side.
            driver.FindElement(By.CssSelector("#L2AGLb")).Click();

            someCapturedValue = driver.FindElement(By.TagName("Body")).Text;
            _scenarioContext["someValueToBePassedAround"] = someCapturedValue;
        }
        private string someCapturedValue;


        [StepDefinition(@"'(.*)' is the top result")] //Then is a validation/assertion point
        public void ThenEdgewordsIsTheTopResult(string searchResult)
        {
            //Capture a value that can be used to check the previous steps have "worked"
            string topResult = driver.FindElement(By.CssSelector("#search h3:not(div > *)")).Text;
            //Assert on the value
            //Nunit Style
            Assert.That(topResult, Does.Contain(searchResult), searchResult + " is not the top result");
            //FluentAssertion style
            //topResult.Should().Contain(searchResult);
        }

        [Then(@"I should see in the results")]
        public void ThenIShouldSeeInTheResults(Table table)
        {
            
            string searchResults = driver.FindElement(By.Id("rso")).Text;

            foreach (var row in table.Rows)
            {
                Assert.Multiple(() =>
                {
                    Assert.That(searchResults, Does.Contain(row["url"]), "URL not found");
                    //Assert.That(searchResults, Does.Contain(row[0]), "URL not found"); //Using column index
                    Assert.That(searchResults, Does.Contain(row["title"]), "Title not found");
                });

            }
        }

    }
}
